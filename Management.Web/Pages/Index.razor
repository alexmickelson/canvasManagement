@page "/"
@using CanvasModel.EnrollmentTerms
@using Management.Web.Shared.Semester
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ICanvasService canvasService
@inject IConfigurationManagement configurationManagement
@inject ProtectedLocalStorage BrowserStorage



@code
{
  private string semesterConfigurationKey = "semesterCalendarConfiguration";
  private IEnumerable<EnrollmentTermModel>? terms { get; set; } = null;
  private ulong? selectedTermId { get; set; }
  private EnrollmentTermModel? selectedTerm
  {
    get => terms?.FirstOrDefault(t => t.Id == selectedTermId);
  }
  private List<DayOfWeek> days { get; set; } = new();
  private bool saved { get; set; } = false;

  protected override async Task OnInitializedAsync()
  {
    terms = await canvasService.GetCurrentTermsFor();
    readTermFromConfig();
    readDaysFromConfig();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) 
  {
    if(firstRender)
    {
      var storedConfiguration = await BrowserStorage.GetAsync<SemesterCalendarConfig>(semesterConfigurationKey);
      if (storedConfiguration.Success) {
        Console.WriteLine(JsonSerializer.Serialize(storedConfiguration.Value));
        configurationManagement.SemesterCalendar = storedConfiguration.Value;
      } else {
        Console.WriteLine("no stored configuration");
      }
      StateHasChanged();
    }
  }

  private void readTermFromConfig()
  {
    if (terms == null || configurationManagement.SemesterCalendar == null) return;
    foreach (var term in terms)
    {
      var termInConfiguration = configurationManagement.SemesterCalendar.StartDate == term.StartAt;
      if (termInConfiguration)
      {
        selectedTermId = term.Id;
      }
    }
  }

  private void readDaysFromConfig()
  {
    if (terms == null || configurationManagement.SemesterCalendar == null) return;

    days = configurationManagement.SemesterCalendar.Days.ToList();
  }

  public async void HandleSave()
  {
    saved = true;
    configurationManagement.SetConfiguration(
        selectedTerm ?? throw new Exception("cannot save configuration without selecting term"), 
        days.ToArray()
    );
    await BrowserStorage.SetAsync(
      semesterConfigurationKey, 
      configurationManagement.SemesterCalendar ?? throw new Exception("Semester Calendar configuration not properly configured")
    );

    Console.WriteLine(JsonSerializer.Serialize(await BrowserStorage.GetAsync<SemesterCalendarConfig>(semesterConfigurationKey)));
  }
}
<PageTitle>Index</PageTitle>

@if (terms != null)
{
  <div class="row justify-content-center">
  <div class="col-auto">

    <form>
      <label for="termselect">Select Term:</label>
      <select id="termselect" class="form-select" @bind="selectedTermId">
        @foreach (var term in terms)
          {
            <option value="@term.Id">@term.Name</option>
          }
        </select>
      </form>
    </div>
  </div>
}
@if (selectedTerm is not null)
{
  <h5>Select Days Of Week</h5>
  <div class="row m-3">
  @foreach (DayOfWeek day in (DayOfWeek[])Enum.GetValues(typeof(DayOfWeek)))
    {
      <div class="col">
        <button class="@(
              days.Contains(day) 
              ? "btn btn-secondary" 
              : "btn btn-outline-secondary"
            )" @onclick="() => {
              if(days.Contains(day))
                days.Remove(day);
              else
                days.Add(day);
            }" disabled="@saved">
          @day
        </button>
      </div>
    }
  </div>
  <div class="row justify-content-center">
    <div class="col-auto">
      <button @onclick="@HandleSave" class="btn btn-primary">
        Save
      </button>
    </div>
  </div>
}

@if (configurationManagement.SemesterCalendar is not null)
{
  <div>Config complete</div>
}