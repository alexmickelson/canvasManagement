@inject DragContainer dragContainer
@inject CoursePlanner configurationManagement

@inject CoursePlanner planner

@code 
{
  [Parameter, EditorRequired]
  public DateTime? date { get; set; } =
  default!; 
  
  private bool isWeekDay {
    get => date?.DayOfWeek != null;
  }
  private bool dragging {get; set;} = false;
  protected override void OnInitialized()
  {
    planner.StateHasChanged += reload;
  }
  private void reload()
  {
    this.InvokeAsync(this.StateHasChanged);
  }
  public void Dispose()
  {
    planner.StateHasChanged -= reload;
  }
  
  private IEnumerable<LocalAssignment> TodaysAssignments 
    {
    get
    {
      if(planner.LocalCourse == null || date == null)
        return Enumerable.Empty<LocalAssignment>();
      else
        return planner.LocalCourse.Modules
          .SelectMany(m => m.Assignments)
          .Where(a => a.DueAt.Date == date?.Date);
    }
  }

  private IEnumerable<LocalQuiz> todaysQuizzes 
    {
      get
      {
        if(planner.LocalCourse == null || date == null)
          return Enumerable.Empty<LocalQuiz>();
        else
          return planner.LocalCourse.Modules
            .SelectMany(m => m.Quizzes)
            .Where(q => q.DueAt.Date == date?.Date);
      }
    }
  private string calculatedClass
  {
    get
    {
      var baseClasses = "col border rounded rounded-3 p-2 pb-4 m-1 "; 
      if(dragging)
        return baseClasses + " bg-secondary text-light ";

      if (isWeekDay)
      {
        DayOfWeek? weekDay = date?.DayOfWeek;
        DayOfWeek notNullDay = weekDay ?? default;
        
        var isClassDay = planner.LocalCourse?.DaysOfWeek.Contains(notNullDay) ?? false;
        var dayInSemester = 
          isClassDay
            && date <= planner.LocalCourse?.EndDate
            && date >= planner.LocalCourse?.StartDate;
        
        var totalClasses = dayInSemester 
          ? "bg-light-subtle text-light " + baseClasses 
          : " " + baseClasses;

        return totalClasses;
      }
      else
      {
        return baseClasses;
      }
    }
  }
  void OnDragEnter() {
    dragging = true;
  }
  void OnDragLeave() {
    dragging = false;
  }

  void OnDrop()
  {
    dragging = false;
    if(dragContainer.DropCallback == null){
      System.Console.WriteLine("no drop callback set");
      return;
    }
    if(date != null)
    {
      DateTime d = date ?? throw new Exception("should not get here, error converting date from nullable");
      dragContainer.DropCallback?.Invoke(d, null);
    }
  }
} 

<div 
  class="@calculatedClass"
  @ondrop="@(() => OnDrop())"
  @ondragenter="OnDragEnter"
  @ondragleave="OnDragLeave"
  ondragover="event.preventDefault();"
>
  @(isWeekDay ? date?.Day : "")
  <div class="m-0 ps-3">
  @foreach (var assignment in TodaysAssignments)
  {
      @* Console.WriteLine($"assignment: {assignment.Name}"); *@
      <AssignmentInDay Assignment="assignment" @key="@assignment" />
  }

  @foreach(var quiz in todaysQuizzes)
  {
    <QuizInDay Quiz="quiz" @key="@quiz" />
  }
  </div>
</div>
